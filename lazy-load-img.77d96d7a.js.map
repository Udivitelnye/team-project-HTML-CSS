{"version":3,"sources":["js/lazy-load-img.js"],"names":["imgGalleryRef","document","querySelector","options","rootMargin","imgGalleryCallback","entries","observer","forEach","entry","isIntersecting","target","style","transform","unobserve","ioImgGallery","IntersectionObserver","observe"],"mappings":";AAqCA,IAAMA,EAAgBC,SAASC,cAAc,kBAEvCC,EAAU,CACdC,WAAY,OAIRC,EAAqB,SAACC,EAASC,GACnCD,EAAQE,QAAQ,SAAAC,GACVA,EAAMC,iBACMD,EAAME,OACdC,MAAMC,UAAY,WACxBN,EAASO,UAAUL,EAAME,YAKzBI,EAAe,IAAIC,qBAAqBX,EAAoBF,GAClEY,EAAaE,QAAQjB","file":"lazy-load-img.77d96d7a.js","sourceRoot":"../src","sourcesContent":["// const imgArray = document.querySelectorAll('img[data-lazy]');\n// const options = {\n//   rootMargin: \"100px\",\n// //   threshold: [0.5],\n// };\n\n// const imgLazyLoadCallback = (entries, observer) => {\n//   entries.forEach(entry => {\n//       if (entry.isIntersecting) {\n//           console.log(`sdf`);\n//           const image = entry.target;\n//           const src = image.dataset.lazy;\n//           image.src = src;\n//           image.removeAttribute('data-lazy');\n\n//           const tagPictureRef = image.parentNode;\n//           const arraySourceTags = tagPictureRef.querySelectorAll('source');\n//           arraySourceTags.forEach(source => {\n//               source.srcset = source.dataset.lazy;\n//               source.removeAttribute('data-lazy');\n//           });\n\n//         if (image.hasAttribute('data-gallery')) {\n//             image.style.transform = 'scale(1)';\n//         }\n\n\n//       observer.unobserve(image);\n//     }\n//   });\n// };\n\n// const ioImgLazyLoad = new IntersectionObserver(imgLazyLoadCallback, options);\n// imgArray.forEach(img => ioImgLazyLoad.observe(img));\n\n/* ------------------------------------------ */\n/* -------------------вспливання для картинки галереї--------------- */\nconst imgGalleryRef = document.querySelector('[data-gallery]');\n\nconst options = {\n  rootMargin: \"0px\",\n//   threshold: [0.5],\n};\n\nconst imgGalleryCallback = (entries, observer) => {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      const image = entry.target;\n      image.style.transform = 'scale(1)';\n      observer.unobserve(entry.target);\n    }\n  });\n};\n\nconst ioImgGallery = new IntersectionObserver(imgGalleryCallback, options);\nioImgGallery.observe(imgGalleryRef);"]}